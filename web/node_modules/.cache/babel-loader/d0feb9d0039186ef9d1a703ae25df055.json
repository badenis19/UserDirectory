{"ast":null,"code":"import _objectSpread from \"/Users/warren/code/badenis19/UserDirectory/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport var placeHttpRequest = function placeHttpRequest(url, method, body, fetch) {\n  var options = {\n    method: method,\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (method.toLowerCase() !== 'get' && body) {\n    options = _objectSpread({}, options, {\n      body: JSON.stringify(body)\n    });\n  }\n\n  return fetch(url, options).then(function (response) {\n    return response.json().then(function (json) {\n      //const camelisedJson = humps.camelizeKeys(json || {} )\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n\n      return json;\n    });\n  });\n};\nexport var GET = 'HTTP_GET';\nexport var POST = 'HTTP_POST';\nexport var PUT = 'HTTP_PUT';\nexport default (function (fetch) {\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        var method;\n\n        switch (action.type) {\n          case GET:\n            method = 'get';\n            break;\n\n          case POST:\n            method = 'post';\n            break;\n\n          case PUT:\n            method = 'put';\n            break;\n\n          default:\n            return next(action);\n        }\n\n        var url = action.url,\n            success = action.success,\n            body = action.body,\n            failure = action.failure;\n\n        if (typeof url !== 'string') {\n          throw new Error('Specify a string endpoint URL.');\n        }\n\n        if (typeof success !== 'function') {\n          throw new Error('No success callback defined');\n        }\n\n        if (typeof failure !== 'function') {\n          throw new Error('No failure callback defined');\n        }\n\n        return placeHttpRequest(url, method, body, fetch).then(success, failure);\n      };\n    };\n  };\n});","map":{"version":3,"sources":["/Users/warren/code/badenis19/UserDirectory/web/src/util/httpRequest.js"],"names":["placeHttpRequest","url","method","body","fetch","options","headers","toLowerCase","JSON","stringify","then","response","json","ok","Promise","reject","GET","POST","PUT","store","next","action","type","success","failure","Error"],"mappings":";AAAA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,KAApB,EAA8B;AAE5D,MAAIC,OAAO,GAAG;AACZH,IAAAA,MAAM,EAANA,MADY;AAEZI,IAAAA,OAAO,EAAE;AACP,gBAAU,mCADH;AAEP,sBAAgB;AAFT;AAFG,GAAd;;AAQA,MAAIJ,MAAM,CAACK,WAAP,OAAyB,KAAzB,IAAkCJ,IAAtC,EAA4C;AAC1CE,IAAAA,OAAO,qBACFA,OADE;AAELF,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAFD,MAAP;AAID;;AAED,SAAOC,KAAK,CAACH,GAAD,EAAMI,OAAN,CAAL,CACJK,IADI,CACC,UAAAC,QAAQ;AAAA,WACZA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAAAE,IAAI,EAAI;AAC3B;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,eAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACD;;AAED,aAAOA,IAAP;AACD,KARD,CADY;AAAA,GADT,CAAP;AAYD,CA7BM;AA+BP,OAAO,IAAMI,GAAG,GAAG,UAAZ;AACP,OAAO,IAAMC,IAAI,GAAG,WAAb;AACP,OAAO,IAAMC,GAAG,GAAG,UAAZ;AAGP,gBAAe,UAAAd,KAAK;AAAA,SAAI,UAAAe,KAAK;AAAA,WAAI,UAAAC,IAAI;AAAA,aAAI,UAAAC,MAAM,EAAI;AACjD,YAAInB,MAAJ;;AAEA,gBAAQmB,MAAM,CAACC,IAAf;AACE,eAAKN,GAAL;AACEd,YAAAA,MAAM,GAAG,KAAT;AACA;;AACF,eAAKe,IAAL;AACEf,YAAAA,MAAM,GAAG,MAAT;AACA;;AACF,eAAKgB,GAAL;AACEhB,YAAAA,MAAM,GAAG,KAAT;AACA;;AACF;AACE,mBAAOkB,IAAI,CAACC,MAAD,CAAX;AAXJ;;AAHiD,YAiBzCpB,GAjByC,GAiBToB,MAjBS,CAiBzCpB,GAjByC;AAAA,YAiBpCsB,OAjBoC,GAiBTF,MAjBS,CAiBpCE,OAjBoC;AAAA,YAiB3BpB,IAjB2B,GAiBTkB,MAjBS,CAiB3BlB,IAjB2B;AAAA,YAiBrBqB,OAjBqB,GAiBTH,MAjBS,CAiBrBG,OAjBqB;;AAmBjD,YAAI,OAAOvB,GAAP,KAAe,QAAnB,EAA6B;AAC3B,gBAAM,IAAIwB,KAAJ,CAAU,gCAAV,CAAN;AAED;;AAED,YAAI,OAAOF,OAAP,KAAmB,UAAvB,EAAmC;AACjC,gBAAM,IAAIE,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,YAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjC,gBAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,eAAOzB,gBAAgB,CAACC,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,KAApB,CAAhB,CACJM,IADI,CACCa,OADD,EACUC,OADV,CAAP;AAED,OAlCoC;AAAA,KAAR;AAAA,GAAT;AAAA,CAApB","sourcesContent":["export const placeHttpRequest = (url, method, body, fetch) => {\n\n  let options = {\n    method,\n    headers: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (method.toLowerCase() !== 'get' && body) {\n    options = {\n      ...options,\n      body: JSON.stringify(body)\n    };\n  }\n\n  return fetch(url, options)\n    .then(response =>\n      response.json().then(json => {\n        //const camelisedJson = humps.camelizeKeys(json || {} )\n\n        if (!response.ok) {\n          return Promise.reject(json )\n        }\n\n        return json;\n      })\n     )\n};\n\nexport const GET = 'HTTP_GET';\nexport const POST = 'HTTP_POST';\nexport const PUT = 'HTTP_PUT';\n\n\nexport default fetch => store => next => action => {\n  let method;\n\n  switch (action.type) {\n    case GET:\n      method = 'get';\n      break;\n    case POST:\n      method = 'post';\n      break;\n    case PUT:\n      method = 'put';\n      break;\n    default:\n      return next(action )\n  }\n\n  const { url, success, body, failure } = action;\n\n  if (typeof url !== 'string') {\n    throw new Error('Specify a string endpoint URL.' )\n\n  }\n\n  if (typeof success !== 'function') {\n    throw new Error('No success callback defined' )\n  }\n\n  if (typeof failure !== 'function') {\n    throw new Error('No failure callback defined' )\n  }\n\n  return placeHttpRequest(url, method, body, fetch)\n    .then(success, failure )\n};"]},"metadata":{},"sourceType":"module"}